{"version":3,"sources":["components/CounterButton.js","components/CounterButton2.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","props","state","count","nextProps","nextState","this","console","log","id","color","onClick","setState","Component","CounterButton2","Card","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","isPending","filteredRobots","App","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.16a47bca.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    console.log('counter');\n    return (\n      <button id='counter'\n              color={this.props.color}\n              onClick={() => this.setState(state => ({count: state.count + 1}))} >\n              Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\n\nclass CounterButton2 extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    console.log('counter');\n    return (\n      <button id='counter'\n              color={this.props.color}\n              onClick={() => this.setState(state => ({count: state.count + 1}))} >\n              Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton2;","import React from 'react';\n\n\nconst Card = (props) => {\n\n\n  const { name, email, id } = props;\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( {robots} ) => {\n\n  // if (true) {\n  //   throw new Error('Noooo!!');\n  // }\n\n  return (\n    <div>\n      { \n        robots.map((user, i) => {\n          return (\n            <Card \n              key={i} \n              id={ robots[i].id } \n              name={ robots[i].name } \n              email={ robots[i].id }\n            />\n          ); \n        })\n    }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n      <div className='pa2'>\n         <input \n          aria-label='Search Robots'\n          className='pa3 ba b--green bg-lightest-blue'\n          type='search'\n          placeholder='search robots'\n          onChange={searchChange}></input>\n      </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log(props);\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      { props.children }\n    </div>\n    \n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  } \n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Error Occured</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CounterButton from '../components/CounterButton';\nimport CounterButton2 from '../components/CounterButton2';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoudary from '../components/ErrorBoundary';\n\nclass MainPage extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter(robot => {\n        return robot.name\n          .toLowerCase()\n          .includes(this.props.searchField.toLowerCase());\n    });\n  }\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n    const filteredRobots = this.filterRobots();\n\n    return isPending? <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Robo Friends</h1>\n          <CounterButton />\n          <CounterButton2 />\n          <Scroll>\n            <ErrorBoudary>\n              <SearchBox searchChange={onSearchChange}></SearchBox>\n              <CardList robots={ filteredRobots } /> \n            </ErrorBoudary>        \n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { setSearchField, setRobots } from '../actions';\nimport MainPage from './MainPage';\n\n\nexport class App extends Component {\n\n  render() {\n    return <MainPage {...this.props} />\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(setRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nexport const setSearchField = (text) => {\n  // console.log(text);\n  return {\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n  }\n}\n\nexport const setRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response =>  response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n ","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED  \n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCHFIELD:\n      // return { ...state, searchField: action.payload };\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger(); // Middleware  \nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render(  <Provider store={store}>\n                    <App/>\n                  </Provider> \n                , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}